@page "/"
@using BrightApricot.Client.Interfaces
@using BrightApricot.Shared.Models
@using System.Linq.Expressions
@using BrightApricot.Client.Enums
@inject IRecipeHandler RecipeHandler 
@* My recipe handler dependency injection*@


    <Titlebar Title="@_title" 
              BackButtonAction="(() => UnselectRecipe())"
              ShowBackButton="_showBackButton"
              @ref="_titlebar"/> @* the dynamic titlebar *@


@if (_selectedRecipe == null) @* Shows a recipe if one is selected *@
{
    <RecipeListView 
        Recipes="_recipes"
        OnRecipeSelected="SelectRecipe"/>
}
    
@if (_selectedRecipe != null) @* If not it shows a list *@
{
    <RecipeView ViewRecipe="@_selectedRecipe"/>
    
}


<ActionButton   
    CreateAction="TestAction" 
    EditAction="TestAction" 
    SaveAction="TestAction" 
    Action="_currentAction"
    @ref="_actionButton"/> @* The actionButton and its test event handlers *@

@code
{
    private IEnumerable<Recipe> _recipes = new List<Recipe>(); //my local recipe store
    private Recipe _selectedRecipe;

    private string _title = "RecipeList";

    private Titlebar _titlebar; //refers to the titlebar that is rendered
    private bool _showBackButton;

    private ActionTypes _currentAction = ActionTypes.Create;
    private ActionButton _actionButton;

    ///<summary>
    /// Test action... delete soon
    /// </summary>
    private void TestAction()
    {
        var variable = string.Empty;
    }

    ///<summary>
    /// Assigns a selected recipe and updates the titlebar & actionbutton
    /// </summary>
    protected void SelectRecipe(Recipe recipe)
    {
        if (recipe == null)
            return;
        _selectedRecipe = recipe;
        UpdateActionButton(ActionTypes.Edit);
        UpdateTitlebar();
    }

    ///<summary>
    /// Updates the action button with the local reference
    /// </summary>
    private void UpdateActionButton(ActionTypes actionType)
    {
        _currentAction = actionType;
        _actionButton.UpdateAction();
    }
    
    ///<summary>
    /// Un assigns the selected recipe and updates the titlebar and Action button
    /// </summary>
    protected void UnselectRecipe()
    {
        _selectedRecipe = null;
        UpdateActionButton(ActionTypes.Create);
        UpdateTitlebar();
    }


    ///<summary>
    /// Updates the titlebar with the local reference
    /// </summary>
    private void UpdateTitlebar()
    {
        _title = _selectedRecipe == null ? "RecipeList" : "RecipeView";
        _showBackButton = _selectedRecipe != null;
        _titlebar.UpdateState();
    }


    ///<summary>
    /// triggers the call to the REST API to fetch the test data
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await RecipeHandler.BeginCommit();
        _recipes = RecipeHandler.Recipes;
    }
}
